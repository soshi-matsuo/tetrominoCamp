-- doing
  [ ] refactor update logic of GAME_STATE.PLAYING
  [ ] enrich GUI
    [ ] use canvas instead of DOM?

-- to do
対人戦に対応させたい
  turn system（プレイヤーが交代する）
  盤面は共有したままテトリスをプレイしていく
  GAMEOVER段階で、自分が残したミノが多いor少ない側の勝ち
  
  ex user story
  - push play
  - while continuing game
    - place tetromino
    - turn change
    - place tetromino by opponent
    - turn change
  - if game is over
    - count minos
    - determine winner

  --> have to implement

-- done
---- refactor existing code
[v] game masterとonready関数
  [v] let board ..とeventlistner呼び出しまとめる
  [v] time含めglobalぽい変数の整理

[v] accountたちをクラスでまとめる
  [v] board.js ctxNextまわりもこっち
  [v] clearLinesの点数処理もこっち
  [v] getLinesClearPointsも

[v] movesはmain.jsじゃないな
[v] keyDownEventListnerをflexibleに

[v] animateの中を整理
  [v] update, draw関数つくる
  [v] gameOverもupdate, drawで処理わける
  [v] gameOverしたらgame loopぬけても良いよ
  [v] pauseもupdate, drawもわけようぜ

---- add new function
[v] separate key for player1, 2(arrow, wasd)
  [v] 1. simply add if sentence
  [v] 2. make class for keyEventListner
    [v] switch accept keys by some trigger
  [v] refactor keyInputHandler
    [v] generalize GameMaster.commands

[v] organize DOM
  [v] delete existing score
  [v] show number of cells for each player

[v] count minos
  [v] count each values in grid

[v] turn change
  [v] separate piece for players
    [v] coloring
    [v] spawn mino per player
    [v] 1 next mino 

[v] determine winner
  [v] ダメージレース
    [v] 自分が消した自分のセルの数が、相手に与えるダメージになる
    [v] gameOverさせたプレイヤーにはデスペナルティ(HPに固定ダメージor割合ダメージ？)
    [v] 相手のHPをゼロにしたプレイヤーの勝ち
      [v] gameOver時点で両者HPが残っていた場合(デスペナルティを計算した上で)残りHPの多い方の勝ち
      
[ ] refactor
  [v] increase game speed by modifying level logic
  [v] separate space key
  [v] add idle to game state, shift to playing once play is clicked→Ready is enough
    [v] error when pressing space 
    [v] modify or remove esc key's function
  [v] turn management (observer pattern?)
    [v] gameMaster.turnにturn関係の処理をまとめる
    [v] board.drop()の処理を分割したい
    [v] Pieceの初期化の際に、turnではなくcolorを渡す
      [v] SHAPESの値渡しを修正して処理落ちを改善、UX向上
